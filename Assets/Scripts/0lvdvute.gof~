using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

// This controls the game logic
// The game is first initialized with a game map, player location,
// boxes locations and storage locations
// and then is controlled by game logic
// In game logic, player can move in the map
// and check the winning condition after each move
// There are two more functions, display game and display winning messages

// Game Starts here
// There will be a man pushing boxes in order to
// Put them back in the right place
// There will be different boxes, pushable or not
public class GameManager : MonoBehaviour
{

    // Fields
    public MapBuilder mapBuilder;
    public GameObject nextButton;
    private Player player;
    private bool input;
    private Map gamemap;
    private int stepCountLv1;
    private int stepCountLv2;
    private int stepCountLv3;
    private int mapSelected;

    public GameManager() 
    {
        stepCountLv1 = 1;
        stepCountLv2 = 8;
        stepCountLv3 = 150;
    }
    /*
    
    protected List<Box> boxes;

    // Constructors
    

    public GameManager(string filename)
    {

    }
    // Methods
    private void initialization()
    {

    }
    public void gmae_logic()
    {

    }
    public void player_action()
    {

    }
    
    public static void pushLeft()
    {
    }
    public static void pushRIght()
    {
    }

    public static void pushUp()
    {
    }

    public static void pushDown()
    {
    }

    public static void walk()
    {
    }
    public static void is_correct_box_location() { }

    */
    // Game menu starts in Start()
    // Start is called before the first frame update
    void Start()
    {
        game_menu();
    }

    public void game_menu()
    {
        SelectionPage(0);
    }

    private IEnumerator SelectionPage(int selection) 
    {
        mapSelected = selection;
        nextButton.SetActive(false);
        //reset_all();
        if (SceneManager.sceneCount > 1)
        {
            AsyncOperation asyncUnloadWin = SceneManager.UnloadSceneAsync("WinScene");
            AsyncOperation asyncUnloadLoad = SceneManager.UnloadSceneAsync("LoseScene");
            AsyncOperation asyncUnloadLevel = SceneManager.UnloadSceneAsync("LevelScene");
            AsyncOperation asyncUnloadMenu = SceneManager.UnloadSceneAsync("Menu");
            while (!asyncUnloadWin.isDone && !asyncUnloadLoad.isDone && !asyncUnloadLevel.isDone && !asyncUnloadMenu.isDone)
            {
                yield return null;
                Debug.Log("UnLoading...");
            }
            Debug.Log("Unload Done");
            Resources.UnloadUnusedAssets();
        }
        // selection 0 is menu page
        if (selection == 0)
        {
            AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("Menu", LoadSceneMode.Additive);
            while (!asyncLoad.isDone)
            {
                yield return null;
                Debug.Log("Loading...");
            }
            SceneManager.SetActiveScene(SceneManager.GetSceneByName("Menu"));
            Debug.Log("Menu loaded");
            // selection 1 to 3 is for Map 1 to 3
        }
        if(selection > 0 && selection < 4)
        {
            AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("LevelScene", LoadSceneMode.Additive);
            while (!asyncLoad.isDone)
            {
                yield return null;
                Debug.Log("Loading...");
            }
            SceneManager.SetActiveScene(SceneManager.GetSceneByName("LevelScene"));
            mapBuilder.Build(selection);
            player = FindObjectOfType<Player>();
            Debug.Log("Map loaded");
        // selection 4 is winning page
        }else if(selection == 4)
        {
            AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("WinScene", LoadSceneMode.Additive);
            while (!asyncLoad.isDone)
            {
                yield return null;
                Debug.Log("Loading...");
            }
            SceneManager.SetActiveScene(SceneManager.GetSceneByName("WinScene"));
            Debug.Log("Menu loaded");
        }
        else if (selection == 5)
        {
            AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("LoseScene", LoadSceneMode.Additive);
            while (!asyncLoad.isDone)
            {
                yield return null;
                Debug.Log("Loading...");
            }
            SceneManager.SetActiveScene(SceneManager.GetSceneByName("LoseScene"));
            Debug.Log("Menu loaded");
        }
    }

    private bool win() 
    {
        if (IsLevelComplete())
        {
            
        }
        return false;
    }

    private bool lose() 
    {
        if(mapBuilder.selected == 1)
        {
            if(stepCountLv1 == 0)
            {
                return true;
            }
        }else if (mapBuilder.selected == 2)
        {
            if (stepCountLv2 == 0)
            {
                return true;
            }
        }
        else if (mapBuilder.selected == 3)
        {
            if (stepCountLv3 == 0)
            {
                return true;
            }
        }
        return false;
    }

    // Update is called once per frame
    public void Update()
    {
        Vector2 moveInput = new Vector2(Input.GetAxisRaw("Horizontal"), Input.GetAxisRaw("Vertical"));
        moveInput.Normalize();
        if(moveInput.sqrMagnitude > 0.5)
        {
            // For Discrete Movement, once at a time
            if (input)
            {
                input = false;
                player.move(moveInput);
                if(mapSelected == 1)
                {
                    stepCountLv1--;
                }else if (mapSelected == 2)
                {
                    stepCountLv2--;
                }
                else if (mapSelected == 3)
                {
                    stepCountLv3--;
                }
                nextButton.SetActive(IsLevelComplete());
                // Determine if this step causes winning condition
                if (win())
                {
                    SelectionPage(4);
                }
                else if(lose())
                {
                    SelectionPage(5);
                }
            }
        }
        else
        {
            input = true;
        }
    }

    public void Nextlevel()
    {
        nextButton.SetActive(false);
        mapBuilder.selectMap(mapSelected++);
        StartCoroutine(ResetSceneAsync());
    }

    public void reset_all()
    {
        StartCoroutine(ResetSceneAsync());
    }

    public bool IsLevelComplete()
    {
        Box[] boxes = FindObjectsOfType<Box>();
        foreach(var box in boxes)
        {
            if (!box._onCross)
            {
                return false;
            }
        }
        nextButton.SetActive(true);
        return true;
    }

    public IEnumerator ResetSceneAsync()
    {
        stepCountLv1 = 1;
        stepCountLv2 = 8;
        stepCountLv3 = 150;
        if (SceneManager.sceneCount > 1)
        {
            AsyncOperation asyncUnload = SceneManager.UnloadSceneAsync("LevelScene");
            while (!asyncUnload.isDone)
            {
                yield return null;
                Debug.Log("UnLoading...");
            }
            Debug.Log("Unload Done");
            Resources.UnloadUnusedAssets();
        }

        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("LevelScene", LoadSceneMode.Additive);
        while (!asyncLoad.isDone)
        {
            yield return null;
            Debug.Log("Loading...");
        }
        SceneManager.SetActiveScene(SceneManager.GetSceneByName("LevelScene"));
        mapBuilder.Build(mapSelected);
        player = FindObjectOfType<Player>();
        Debug.Log("Level loaded");
    }
}
